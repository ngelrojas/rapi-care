# Generated by Django 3.2.4 on 2021-06-22 00:42

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(choices=[('pending', 'pending'), ('under-review', 'under-review'), ('approved', 'approved'), ('rejected', 'rejected')], default='pending')),
                ('line_of_credit', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('tos_acceptance', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('banking', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True)),
            ],
            options={
                'db_table': 'accounts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accountable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'accountables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(choices=[('pending', 'pending'), ('under-review', 'under-review'), ('approved', 'approved'), ('rejected', 'rejected')], default='pending')),
                ('line_of_credit', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('tos_acceptance', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('banking', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True)),
            ],
            options={
                'db_table': 'accounts_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Beneficiary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_id', models.TextField()),
                ('is_default', models.BooleanField(unique=True)),
                ('bank_code', models.TextField()),
                ('bank_account', models.TextField()),
                ('bank_branch', models.TextField()),
            ],
            options={
                'db_table': 'beneficiaries',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_id', models.TextField()),
                ('name', models.TextField()),
                ('legal_name', models.TextField()),
                ('address', django.contrib.postgres.fields.jsonb.JSONField()),
                ('contact_info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('banking', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('documents', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('verification', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True)),
            ],
            options={
                'db_table': 'businesses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BusinessHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_id', models.TextField()),
                ('name', models.TextField()),
                ('legal_name', models.TextField()),
                ('address', django.contrib.postgres.fields.jsonb.JSONField()),
                ('contact_info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('banking', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('documents', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('verification', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True)),
            ],
            options={
                'db_table': 'businesses_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.TextField(unique=True)),
                ('password', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'clients',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataBroker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('broker_id', models.TextField()),
                ('broker', models.TextField()),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'data_broker',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Integration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('integration_name', models.TextField()),
                ('event', models.TextField()),
                ('param_name', models.TextField()),
                ('param_value', models.TextField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'integrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('offer_token', models.TextField(unique=True)),
                ('signature', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True)),
            ],
            options={
                'db_table': 'loans',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoanHistory',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('offer_token', models.TextField(unique=True)),
                ('signature', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True)),
            ],
            options={
                'db_table': 'loans_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.TextField(unique=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'payments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.TextField()),
                ('last_name', models.TextField()),
                ('id_number', models.TextField()),
                ('address', django.contrib.postgres.fields.jsonb.JSONField()),
                ('contact_info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('banking', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('documents', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('verification', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('marital_status', models.TextField()),
                ('pep', models.BooleanField()),
                ('account_opener', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True)),
            ],
            options={
                'db_table': 'persons',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PersonsHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.TextField()),
                ('last_name', models.TextField()),
                ('id_number', models.TextField()),
                ('address', django.contrib.postgres.fields.jsonb.JSONField()),
                ('contact_info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('banking', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('documents', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('verification', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('marital_status', models.TextField()),
                ('pep', models.BooleanField()),
                ('account_opener', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True)),
            ],
            options={
                'db_table': 'persons_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField(unique=True)),
                ('valid', models.BooleanField(default=True, null=True)),
                ('exp', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField()),
            ],
            options={
                'db_table': 'refresh_tokens',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RefreshTokensHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField(unique=True)),
                ('valid', models.BooleanField(default=True, null=True)),
                ('exp', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sys_period', django.contrib.postgres.fields.ranges.DateTimeRangeField()),
            ],
            options={
                'db_table': 'refresh_tokens_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SchemaMigration',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('applied', models.DateTimeField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=1024, null=True)),
            ],
            options={
                'db_table': 'schema_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'transactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.TextField(blank=True, null=True, unique=True)),
                ('password', models.TextField()),
                ('is_active', models.BooleanField(blank=True, null=True)),
                ('is_superuser', models.BooleanField(blank=True, null=True)),
                ('is_staff', models.BooleanField(blank=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WebhookEndpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('status', models.TextField(default='enabled')),
                ('events', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'webhook_endpoints',
                'managed': False,
            },
        ),
    ]
